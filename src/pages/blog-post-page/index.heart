<nav>
  <home-link text="Projects"></home-link>
  <!-- <project-nav items="{navItems}"></project-nav> -->
</nav>
<article class="content-grid">
  <h1>WebGPU Setup</h1>

  <p>Getting started with WebGPU can be daunting. This post cuts through the complexity, guiding you through the essential setup to render your first (admittedly empty) WebGPU scene. It's the foundation for building incredible visuals - let's dive in!</p>

  <accordion-panel title="What is WebGPU?">
    <p>WebGPU is used for blazing fast, complex graphics rendering as well as performing high number of computation in a fraction of a second. It's an API which allows access to user's GPU within browser.</p>
    <p>You might also heared about <a target="_blank" href="https://registry.khronos.org/webgl/specs/latest/1.0/">WebGL</a>, API used before WebGPU arrived. WebGL was build base on OpenGL API. Since the WebGL creation, the GPUs around the world have evolved their native API a lot. So WebGPU was created to make better usage of newer GPU's API what in the result provided better speed along with more funcionalities like dedicated tools to perform calculations on GPU.</p>
  </accordion-panel>

  <p>Before starting, I encourage you to clone the project from <a>my github</a> to run and follow the code on your local machine!</p>
  <code-block lang="sh">
git clone https://github.com/alaingalvan/webgpu-seed
cd webgpu-seed
npm start
  </code-block>
  
  <h2>Today's Plan</h2>
  <p>To make things easier for you, here is an ✨<em>interactive</em>✨ diagram representing structure of our program.</p>

  <import-svg path="/first-lesson-diagram.svg"></import-svg>
  <p>Don't worry! It might looks like a lot but we are going to endup with less than just a hunder lines of code! The diagram is splitted intro three section, we will go though them one by one.</p>

  <section class="info breakout">
    <p>Learning a new API, specially as complex as WebGPU can be overwhelming, what might lead to discouragement and quitting, even though the reward might be is just behind the corner.</p>
    <p>Remember to take things slow. Once you master the basics, it take little time & efford to create stunning visual effects.</p>
    <p>To give you the essence of learning WebGPU, you can compare learning curves of CSS vs WebGPU.</p>
    <img />
  </section>

  <h2>Section 1: Adapter & Device</h2>

  <p>Let's start from the palce where all access to WebGPU begins, the adapter.</p>

  
  <import-svg path="/flow-diagram.svg"></import-svg>

  <h3>Adapter</h3>
  <p>Representation of the physical GPU and API layer exposed by the operating system. To obtain an adapter we need to call <code>navigator.gpu.requestAdapter()</code>. Additionaly this method accepts a parameter to describe what kind of adapter do we want, low or high performance(user's device might have more than one GPU!).</p>
  <p>The interface is super simple, it provides:</p>
  <ul>
    <li>a bunch of read only information about GPU</li>
    <li>method <code>requestDevice</code> which returns a device.</li>
  </ul>
  <p>We mentioned that Adapter has a method to return a Device, but what actually is the Device?</p>

  <h3>Device</h3>
  <p>Object which represents abstraction of GPU. Provides isolation between web apps, so you don't need to worry about other apps accessing your textures, buffers, anything you do on GPU. Can spawn various types of WebGPU Objects. It's a pretty rich API, so let's stop here for now, we will slowly discover its API piece by piece.</p>
  
  <p>The device is useful throughout the program's runtime, while the adapter is most useful during the early setup. Let's look at the function which uses an adapter to return a device.</p>

  <code-block lang="ts">{files.getDevice}</code-block>

  <h2>Section 2: Canvas & Context</h2>
  <p>The next step is to connect canvas. If you are not familiar yet, canvas is a way to render complex graphics in the browser. In our case it's going to serve as a way of displaying the output from our programs.</p>

  <p>Like canvas itself is just an HTML element, the main API related to its graphic properties is provided via <em>canvas context</em></p>

  <code-block lang="ts">{files.getContext}</code-block>

  <p>Once we got the device and canvas conntected to it, we can start coding our main part of the program.</p>

  <code-block lang="ts">{files.indexSimplified}</code-block>

  <h2>Section 3: Render function!</h2>
  <p>Finally! It's the step where we are going to use all the utils we've created! Process of rendering starts creating a <em>Command Encoder</em> and <em>Render Pass</em>.
  <p>Command Encoder encodes all the commands we are going to send to GPU. It spawns render and calculation passes to provide configuration for group of commands(you might have multiple rendering as well as multiple calculation within one command encoder). In our case we are going to use render pass which contains configuration regarding loading phase, drawing calls and storing the results of our drawings.</p>
  <p>Before obtaining the encoded commands(via <code>finish()</code> method) you have to end all the render and computation passes created by the encoder.</p>

  <code-block lang="ts" highlightLines="6-23" >{files.index}</code-block>

  <p>If you would stop work here, you could noticed the canvas turned into black, what seems to be incorrect since we specified red color. It happens because we haven't finished with our render function yet. The last piece is to send our command buffer to device.queue!</p>
  <p>Alright, but still, if we haven't sent any intructions to be executed yet, why did canvas turned into black instead of being transparent by default? It happens because call of <code>canvasTexture.createView()</code> attaches new texture to canvas if there is no texture yet attached. Any new texture is blakc by default, so in the result we got black canvas!</p>

  <h3>Sneding command buffer to execution queue</h3>
  <p>The last piece is to add <code>device.queue.submit([commandBuffer])</code> to the very end of <code>render</code> function.</p>

  <h2>Polishing</h2>
  <p>At this point our canvas would have it's default size (300x150px), but in most cases we want to stretch the canvas on full width of our window and adjust it each time window size changes.</p>

  <p>and the end put some meme that 90% of WebGPU is configuration, 10% is exeuction</p>

</article>
<!-- <flash-effect><span><h1>PROJECT</h1></span></flash-effect> -->
<!-- <section class="project-steps-page__code-panel">
  <code-tabs tabs="{tabs}" onChange="{onTabsChange}" selected="{selectedFile}"></code-tabs>
  <code-block lang="javascript" highlightLines="{selectedFile === defaultFile ? codeHighlight : undefined}">
    {!!files ? files[selectedFile] : undefined}
  </code-block>
</section> -->